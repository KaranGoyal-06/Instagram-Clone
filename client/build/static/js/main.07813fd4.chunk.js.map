{"version":3,"sources":["components/Navbar.js","components/screens/Home.js","components/screens/Signup.js","components/screens/Login.js","components/screens/Profile.js","components/screens/CreatePost.js","components/screens/UserProfile.js","components/screens/SubscribedUserPosts.js","reducers/userReducer.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","useContext","UserContext","state","dispatch","history","useHistory","className","to","id","console","log","onClick","push","localStorage","clear","type","Home","useState","data","setData","useEffect","fetch","headers","getItem","then","res","json","result","posts","map","item","style","padding","postedBy","_id","name","float","postid","method","newData","filter","M","toast","html","classes","src","photo","color","likes","includes","body","JSON","stringify","postId","catch","err","length","title","comments","record","fontWeight","text","onSubmit","e","preventDefault","target","value","placeholder","Signup","SetName","password","SetPassword","email","SetEmail","image","setImage","undefined","url","setUrl","uploadFields","test","pic","error","message","PostData","FormData","append","uploadPic","onChange","files","Login","setItem","token","user","payload","Profile","mypics","setPics","mypost","maxWidth","margin","borderBottom","display","justifyContent","width","height","borderRadius","followers","following","file","alt","CreatePost","setTitle","setBody","textAlign","postDetails","userProfile","setProfile","userid","useParams","showfollow","setShowFollow","followId","prevState","unfollowId","newFollower","reducer","action","createContext","Routing","parse","exact","path","UserProfile","SubscribedUserPosts","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07813fd4.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { UserContext } from '../App'\r\n\r\nconst Navbar = () => {\r\n    const { state, dispatch } = useContext(UserContext) //destructuring state & dispatch that we passed in the UserContext.Provider as the value in app.js\r\n    const history = useHistory() //importing useHistory for redirecting the user to sign in page on logging out\r\n    const renderList = () => {//this is a function to dynamically render the links like signin, signup, profile etc.\r\n        console.log(state)\r\n        if (state) { //if state is available i.e means user is signed in, then this will implement \r\n            return [\r\n                <li ><Link to=\"/profile\">Profile</Link></li>,\r\n                <li ><Link to=\"/create\">Create Post</Link></li>,\r\n                <li ><Link to=\"/myfollowingpost\">My Following Posts</Link></li>,\r\n                <li><button className=\"btn #d50000 red accent-4\" //implementing the logout button when user is logged in, on click it will simply \r\n                    onClick={() => {\r\n                        history.push('/signin') //will redirect the user to sign in page on logging out\r\n                        localStorage.clear() //clear the user details stored in the local storage\r\n                        dispatch({ type: \"CLEAR\" }) //and dispatch the action type CLEAR to the userReducer.js\r\n\r\n                    }}>Logout</button>\r\n                </li >\r\n            ]\r\n        } else { //if state is not  available i.e means user is not signed in, then this will implement \r\n            return [\r\n                <li><Link to=\"/signin\">Signin</Link></li>,\r\n                <li><Link to=\"/signup\">Signup</Link></li>\r\n            ]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper white\">\r\n                {/* //in the below statement we are creating logic, so that the user is enable to access the home page only when he is logged in */}\r\n                <Link to={state ? \"/\" : \"/signin\"} className=\"brand-logo left\">Instagram</Link>\r\n                <ul id=\"nav-mobile\" className=\"right\">\r\n                    {renderList()}\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport M from 'materialize-css'\r\nimport { UserContext } from '../../App'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Home() { //function for dynamically creating posts\r\n    const [data, setData] = useState([]) //hook for setting post data in an array\r\n    const { state, dispatch } = useContext(UserContext) //state has all the details of the user who is logged in\r\n    console.log(state)\r\n    console.log(data)\r\n    useEffect(() => {\r\n        fetch('/allpost', { //get request for fetching data stored in database regarding all the posts using /allpost route in post.js in server\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\") //passing token as user can only create post when signed in\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                setData(result.posts) //setting data to the obtatined array of result.posts containing info about all the posts\r\n            })\r\n    }, [])\r\n\r\n    const likePost = (id) => { //passing the post id to the /like route in the backend by sending a put request\r\n        fetch('/like', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {//function for updating like state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {//function for updating like state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const makeComment = (text, postId) => { //function for passing the post id and text to the /comment route in the backend by sending a put request\r\n        fetch('/comment', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: postId,\r\n                text: text\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {//function for updating comment state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    const deletePost = (postid) => {\r\n        fetch(`/deletepost/${postid}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.filter(item => { //filtering out every item or post \r\n                    return item._id !== result._id //in this filter will return all the items whose id is not equal to id of the post to be deleted i.e will exclude the one post to be deleted and will show rest of the posts hence delete functionality implemented \r\n                })\r\n                setData(newData)//will set the data as the new filtered out array of the posts \r\n                M.toast({ html: \"Post Deleted\", classes: \"#2e7d32 green darken-3\" })\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {\r\n                data.map(item => { //using map method to dynamically assign properties to each element, item refres to data and data refers to reult.posts array that contain all info about posts\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n                            {/* //in the below line is the very important logic to dynamically view other user's profile\r\n                            if the logged in user clicks on the other user's  name then he will redirect to other user's profile\r\n                            and if the logged in user clicks on his name than he will redirect to his profile */}\r\n                            <h5 style={{ padding: \"5px\" }} >\r\n                                <Link to={item.postedBy._id !== state._id ? `/profile/${item.postedBy._id}` : \"/profile\"}\r\n                                >{item.postedBy.name}</Link> {/* dynamically passing name of the user who created the post */}\r\n\r\n                                {item.postedBy._id == state._id //logic for showing delete post icon to only to the user who created it, \r\n                                    && <i className=\"material-icons\" style={{ //delete icon will show if the logic is true\r\n                                        float: \"right\"\r\n                                    }}\r\n                                        onClick={() => deletePost(item._id)} //implementing the onclick functionality on delete icon, it will refer to deletePost function and will also pass _id\r\n                                    >delete</i>\r\n                                }</h5>\r\n                            <div className=\"card-image\">\r\n                                {/* dynamically passing photo url of the photo uploaded by the user who created the post */}\r\n                                <img src={item.photo}></img>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <i className=\"material-icons\" style={{ color: \"red\" }}>favorite</i>\r\n                                {/* //in the line below adding css materialize icons for like and unlike */}\r\n                                {item.likes.includes(state._id) //in this we are adding a logic to not to show like icon to the user who has already liked a post and unlike icon and unlike icon to user who has already disliked the post\r\n                                    ? <i className=\"material-icons\" //so in this if likes array contain the user id that means user has already liked the post, so they will only be shown the dislike icon\r\n                                        onClick={() => { unlikePost(item._id) }}\r\n                                    >thumb_down</i>\r\n                                    : <i className=\"material-icons\" //and in this if likes array  not contain the user id that means user has not liked the post, so they will only be shown the like icon\r\n                                        onClick={() => { likePost(item._id) }}\r\n                                    >thumb_up</i>}\r\n\r\n\r\n                                {/* //dynamically passing the number of likes, by the length of likes array that is present in every item */}\r\n                                <h6>{item.likes.length} Likes</h6>\r\n                                {/* dynamically passing title and body of the post created by the user */}\r\n                                <h6>{item.title}</h6>\r\n                                <p>{item.body}</p>\r\n\r\n                                {/* //logic for dynamically showing comments on the post */}\r\n                                {\r\n                                    item.comments.map(record => { //mapping the comments array in the item\r\n                                        return (\r\n\r\n                                            < h6 key={record._id} ><span style={{ fontWeight: \"500\" }}> <Link to={record.postedBy._id !== state._id ? `/profile/${record.postedBy._id}` : \"/profile\"}>{record.postedBy.name} </Link>- </span>{record.text} </h6>//this will return everytime a cooment is made, the comment text and user's name will be shown on the screen\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                                {/* //in the line below we are creating logic for dynamically post comments */}\r\n                                <form onSubmit={(e) => {\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value, item._id) //on submit of the we will pass two values text and id, e.target[0].value refers to the comment posted by the user and item._id refers to the id\r\n                                    e.target[0].value = \"\"\r\n                                }}>\r\n                                    <input type=\"text\" placeholder=\"Add a comment\" />\r\n                                    <button className=\"btn #4caf50 green\" type=\"submit\" name=\"action\">Post Comment\r\n                                       <i className=\"material-icons right\">send</i>\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport M from 'materialize-css' //importing our UI framework materialize\r\n\r\nfunction Signup() {\r\n    const history = useHistory()\r\n    const [name, SetName] = useState(\"\") //ustate hook for setting the name value when entered by user\r\n    const [password, SetPassword] = useState(\"\") //ustate hook for setting the password value when entered by user\r\n    const [email, SetEmail] = useState(\"\") //ustate hook for setting the email value when entered by user\r\n    const [image, setImage] = useState(\"\") //ustate hook for setting the image when user is signed up\r\n    const [url, setUrl] = useState(undefined) //ustate hook for setting the url of image when user is signed up, it is set to undefined so that when pic is not uploaded when signed up, the default pic will set\r\n\r\n    useEffect(() => { //this will implement if pic url is present\r\n        if (url) {\r\n            uploadFields()\r\n        }\r\n    }, [url])\r\n\r\n    const uploadPic = () => { //function for uploading a pic\r\n        const data = new FormData() //using formData and fetch(uploading a file) for image uploading\r\n        data.append(\"file\", image) //appending the type of file to upload i.e image\r\n        data.append(\"upload_preset\", \"insta-clone\") //upload preset that we created in cloudinary\r\n        data.append(\"cloud_name\", \"dxh5wpled\") //our cloudinary cloud name\r\n        fetch(\"https://api.cloudinary.com/v1_1/dxh5wpled/image/upload\", { //URL to be requested is API base URL/image/upload present on home page of cloudinary \r\n            method: \"post\",\r\n            body: data\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => { //it will return the object containing all the details of oue uploaded image like uploaded image's cloudinary URL\r\n                setUrl(data.url) //setting the url as the url of the uploaded image\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const uploadFields = () => {\r\n        if (!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)) { //this is an email regex it is used to validate email format, it returns a boolean value, if this returns true the whole code below won't execute\r\n            M.toast({ html: \"Invalid email\", classes: \"#d50000 red accent-4\" })\r\n            return\r\n        }\r\n        fetch(\"/signup\", { //using fetch API to post data to our signup route created in the server folder in auth.js\r\n            method: \"post\", //sending the post request\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" //the data to be posted in the json format\r\n            },\r\n            body: JSON.stringify({ //will convert the existing data entered by the user to the json format, the content type in header should match the body type\r\n                name: name,\r\n                password: password,\r\n                email: email,\r\n                pic: url\r\n            })\r\n        }).then(res => res.json()) //it parses the json response from fetch into native javascript objects\r\n            .then(data => { // data include javascript objects parsed from res.json\r\n                console.log(data)\r\n                if (data.error) {\r\n                    M.toast({ html: data.error, classes: \"#d50000 red accent-4\" }) //creating toast to display error on client UI using materialize and in the second arguement changing the color\r\n                } else { //this will run if there is no error\r\n                    M.toast({ html: data.message, classes: \"#2e7d32 green darken-3\" })\r\n                    history.push('/signin') //navigating the user to login screen after succesfully signing up using usehistory hook\r\n                }\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const PostData = () => { //function for posting signup data to our server\r\n        if (image) { //if user sign up with pic\r\n            uploadPic()\r\n        } else { //if user sign up without uploading pic\r\n            uploadFields()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n                <h2> Instagram</h2>\r\n                <input type=\"text\" placeholder=\"name\" value={name} onChange={(e) => SetName(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e) => SetEmail(e.target.value)} />\r\n                <input type=\"password\" placeholder=\"password\" value={password} onChange={(e) => SetPassword(e.target.value)} />\r\n                <div className=\"file-field input-field\" >\r\n                    <div className=\"btn\">\r\n                        <span>Upload Image</span>\r\n                        <input type=\"file\" onChange={(e) => setImage(e.target.files[0])} />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"btn waves-effect waves-light\" onClick={() => PostData()}>Signup</button>\r\n                {/* //calling the postdata function on click of button */}\r\n                <h5>\r\n                    <Link to=\"/signin\">Already have an account?</Link>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","import React, { useState, useContext } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { UserContext } from '../../App'\r\nimport M from 'materialize-css'\r\n\r\n\r\nfunction Login() {\r\n    const { state, dispatch } = useContext(UserContext) //destructuring state & dispatch that we passed in the UserContext.Provider as the value in app.js\r\n    const history = useHistory()\r\n    const [password, SetPassword] = useState(\"\") //ustate hook for setting the password value when entered by user\r\n    const [email, SetEmail] = useState(\"\") //ustate hook for setting the email value when entered by user\r\n\r\n    const PostData = () => { //function for posting signin data to our server\r\n        if (!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)) { //this is an email regex it is used to validate email format, it returns a boolean value, if this returns true the whole code below won't execute\r\n            M.toast({ html: \"Invalid email\", classes: \"#d50000 red accent-4\" })\r\n            return\r\n        }\r\n        fetch(\"/signin\", { //using fetch API to post data to our signin route created in the server folder in auth.js\r\n            method: \"post\", //sending the post request\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" //the data to be posted in the json format\r\n            },\r\n            body: JSON.stringify({ //will convert the existing data entered by the user to the json format, the content type in header should match the body type\r\n                password: password,\r\n                email: email\r\n            })\r\n        }).then(res => res.json()) //it parses the json response from fetch into native javascript objects\r\n            .then(data => { // data include javascript objects parsed from res.json\r\n                console.log(data)\r\n                if (data.error) {\r\n                    M.toast({ html: data.error, classes: \"#d50000 red accent-4\" }) //creating toast to display error on client UI using materialize and in the second arguement changing the color\r\n                } else { //this will run if there is no error\r\n                    localStorage.setItem(\"jwt\", data.token) //saving the token generated after sign in to the local storage, so that it can be accessed to open protected routes\r\n                    localStorage.setItem(\"user\", JSON.stringify(data.user)) //saving the user details to local storage\r\n                    dispatch({ type: \"USER\", payload: data.user }) //dispatch user details payload to userReducer.js\r\n                    M.toast({ html: \"Signed In\", classes: \"#2e7d32 green darken-3\" })\r\n                    history.push('/') //navigating the user to home screen after succesfully signing in using usehistory hook\r\n                }\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n                <h2> Instagram</h2>\r\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e) => SetEmail(e.target.value)} />\r\n                <input type=\"password\" placeholder=\"password\" value={password} onChange={(e) => SetPassword(e.target.value)} />\r\n                <button className=\"btn waves-effect waves-light\" onClick={() => PostData()}>Login</button>\r\n                <h5>\r\n                    <Link to=\"/signup\">New User?</Link>\r\n                </h5>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { UserContext } from '../../App'\r\n\r\nfunction Profile() {\r\n    const [mypics, setPics] = useState([]) //useState hook to dynamically set images in the profile section\r\n    const { state, dispatch } = useContext(UserContext) //destructuring state & dispatch that we passed in the UserContext.Provider as the value in app.js\r\n    //state contains all the details of user when he is logged in and is null when he is not\r\n    const [image, setImage] = useState(\"\") //ustate hook for setting the image when user updates the pic\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('/mypost', {  //get request for fetching data stored in database regarding all the posts posted by logged in user using /mypost route in post.js in server\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\") //passing token as user can only create post when signed in\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result.mypost)\r\n                setPics(result.mypost) //setting data to the obtatined array of result.mypost containing info about all the posts\r\n            })\r\n    }, []) //passing empty array in the dependency array , so that hook renders in the mounting phase \r\n\r\n\r\n    useEffect(() => {//useeffect hook for  updating the image, it will run only when image exists \r\n\r\n        if (image) {\r\n            const data = new FormData() //using formData and fetch(uploading a file) for image uploading\r\n            data.append(\"file\", image) //appending the type of file to upload i.e image\r\n            data.append(\"upload_preset\", \"insta-clone\") //upload preset that we created in cloudinary\r\n            data.append(\"cloud_name\", \"dxh5wpled\") //our cloudinary cloud name\r\n            fetch(\"https://api.cloudinary.com/v1_1/dxh5wpled/image/upload\", { //URL to be requested is API base URL/image/upload present on home page of cloudinary \r\n                method: \"post\",\r\n                body: data\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => { //it will return the object containing all the details of oue uploaded image like uploaded image's cloudinary URL\r\n\r\n                    fetch('/updatepic', {\r\n                        method: \"put\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n                        },\r\n                        body: JSON.stringify({\r\n                            pic: data.url\r\n                        })\r\n                    }).then(res => res.json())\r\n                        .then(result => {\r\n                            console.log(result)\r\n                            localStorage.setItem(\"user\", JSON.stringify({ ...state, pic: result.pic }))//changing the pic url in local storage\r\n                            dispatch({ type: \"UPDATEPIC\", payload: result.pic })//dispatching an action with payload of uploaded pic url\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }, [image])\r\n\r\n\r\n    const updatePhoto = (file) => {\r\n        setImage(file) //setting the image to the uploaded file \r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ maxWidth: \"550px\", margin: \"0px auto\" }}>\r\n            <div style={{\r\n                margin: \"18px 0px\",\r\n                borderBottom: \"1px solid grey\"\r\n            }}>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-around\",\r\n\r\n                }}>\r\n                    <div>\r\n                        <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                            src={state ? state.pic : \"loading\"}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        {/* //dynamically passing the user name using state option only if it exists */}\r\n                        <h4>{state ? state.name : \"loading\"}</h4>\r\n                        <h5>{state ? state.email : \"loading\"}</h5>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"108%\" }}>\r\n                            <h6>{mypics.length} Posts</h6>\r\n                            {/* //dynamically showing the no. of followers and following */}\r\n                            <h6>{state ? state.followers.length : \"0\"} Followers</h6>\r\n                            <h6>{state ? state.following.length : \"0\"} Following</h6>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {/* //element for uploading the image to update */}\r\n                <div className=\"file-field input-field\" style={{ margin: \"10px\" }}>\r\n                    <div className=\"btn\">\r\n                        <span>Update Image</span>\r\n                        <input type=\"file\" onChange={(e) => updatePhoto(e.target.files[0])} />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n                {\r\n                    mypics.map(item => { //using map method to dynamically assign properties to each element, item refres to data and data refers to reult.mypost array that contain all info about posts\r\n                        return (\r\n                            <img key={item._id} className=\"item\" src={item.photo} alt={item.title}></img>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useState, useEffect } from 'react'\r\nimport M from 'materialize-css'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction CreatePost() {\r\n    const history = useHistory()\r\n    const [title, setTitle] = useState(\"\") //ustate hook for setting the title value when post is created by the user\r\n    const [body, setBody] = useState(\"\") //ustate hook for setting the body value when post is created by the user\r\n    const [image, setImage] = useState(\"\") //ustate hook for setting the image file when post is created by the user\r\n    const [url, setUrl] = useState(\"\")\r\n\r\n\r\n    const postDetails = () => { //creating a function for uploading our image and creating our post\r\n        //Part 1 -> writing code to upload our image to cloudinary \r\n        const data = new FormData() //using formData and fetch(uploading a file) for image uploading\r\n        data.append(\"file\", image) //appending the type of file to upload i.e image\r\n        data.append(\"upload_preset\", \"insta-clone\") //upload preset that we created in cloudinary\r\n        data.append(\"cloud_name\", \"dxh5wpled\") //our cloudinary cloud name\r\n        fetch(\"https://api.cloudinary.com/v1_1/dxh5wpled/image/upload\", { //URL to be requested is API base URL/image/upload present on home page of cloudinary \r\n            method: \"post\",\r\n            body: data\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => { //it will return the object containing all the details of oue uploaded image like uploaded image's cloudinary URL\r\n                setUrl(data.url) //setting the url as the url of the uploaded image\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(() => {//we are putting this part of code in useEffect hook because it will take some time to get 1st part of code to be implemented\r\n        //So this part of code will implement only after url has been setted by the setUrl method\r\n        //Part 2 -> writing code to send a post request to /createpost and also uploading our image from cloudinary's Url\r\n        if (url) { //code will only run when there is URL\r\n            fetch(\"/createpost\", { //using fetch API to post the post's data to our createpost route created in the server folder in auth.js\r\n                method: \"post\", //sending the post request\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\", //the data to be posted in the json format\r\n                    \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\") //passing the token in the header to acces the protected routes\r\n                },\r\n                body: JSON.stringify({ //will convert the existing data entered by the user to the json format, the content type in header should match the body type\r\n                    title: title,\r\n                    body: body,\r\n                    pic: url //uploading our image from cloudinary's Url\r\n                })\r\n            }).then(res => res.json()) //it parses the json response from fetch into native javascript objects\r\n                .then(data => { // data include javascript objects parsed from res.json\r\n                    if (data.error) {\r\n                        M.toast({ html: data.error, classes: \"#d50000 red accent-4\" }) //creating toast to display error on client UI using materialize and in the second arguement changing the color\r\n                    } else { //this will run if there is no error\r\n                        M.toast({ html: \"Successfully Created Post\", classes: \"#2e7d32 green darken-3\" })\r\n                        history.push('/') //navigating the user to home screen after succesfully creating post using usehistory hook\r\n                    }\r\n                }).catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }, [url]) //passing the url in the dependency array so that code will run only when it's updated\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card input-field\"\r\n            style={{\r\n                margin: \"30px auto\",\r\n                maxWidth: \"500px\",\r\n                padding: \"20px\",\r\n                textAlign: \"center\"\r\n            }}\r\n        >\r\n            <input type=\"text\" placeholder=\"title\" value={title} onChange={(e) => setTitle(e.target.value)}></input>\r\n            <input type=\"text\" placeholder=\"body\" value={body} onChange={(e) => setBody(e.target.value)}></input>\r\n            <div className=\"file-field input-field\" >\r\n                <div className=\"btn\">\r\n                    <span>Upload Image</span>\r\n                    <input type=\"file\" onChange={(e) => setImage(e.target.files[0])} />\r\n                </div>\r\n                <div className=\"file-path-wrapper\">\r\n                    <input className=\"file-path validate\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <button className=\"btn waves-effect waves-light\" onClick={() => postDetails()}>Submit Post</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost\r\n","import React, { useEffect, useState, useContext } from 'react'\r\nimport { UserContext } from '../../App'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nfunction Profile() { //function to dynamically show different user's profile, the backend logic is in routes folder in user.js in server\r\n    const [userProfile, setProfile] = useState(null) //useState hook to dynamically set profile of different users\r\n\r\n    const { state, dispatch } = useContext(UserContext) //destructuring state & dispatch that we passed in the UserContext.Provider as the value in app.js\r\n    //state contains all the details of user when he is logged in and is null when he is not\r\n\r\n    const { userid } = useParams() //accessing userid from params using useParams hook\r\n    const [showfollow, setShowFollow] = useState(state ? !state.following.includes(userid) : true) //useState hook for changing follow button from follow to unfollow or vice versa\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(`/profile/${userid}`, {  //get request for fetching data stored in database regarding all the posts posted by the user and the user to show on the /profile/userid route\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\") //passing token as user can only create post when signed in\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                setProfile(result) //setting profile to the obtatined object of result  containing info about all the posts and the user\r\n            })\r\n    }, []) //passing empty array in the dependency array , so that hook renders in the mounting phase \r\n\r\n\r\n    const followUser = () => { //function for dynamically implementing the follow and following in the UI, \r\n        fetch('/follow', { //put request to /follow route defined in user.js in server side\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({ //sending the id of the user which is to followed to the /follow route.\r\n                followId: userid\r\n            })\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                //console.log(data)\r\n                dispatch({ type: \"UPDATE\", payload: { following: data.following, followers: data.followers } }) //dispatching the updated following and followers array payload to the userReducer.js\r\n                localStorage.setItem(\"user\", JSON.stringify(data))\r\n                setProfile((prevState) => {//setting the state when user followed some other user\r\n\r\n                    return { //we are basically want to get the id of the following person to the followers array of followed user\r\n                        //for this purpose as every entry is either object or array, we have to use spread operator repeatedly to merge states\r\n                        ...prevState, //spreading the previous state\r\n                        user: {\r\n                            ...prevState.user, //spreading the previous state.user\r\n                            followers: [...prevState.user.followers, data._id] //spreading the previous state.user.followers and setting the id in followers array\r\n                        }\r\n                    }\r\n                })\r\n                setShowFollow(false)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const unfollowUser = () => { //function for dynamically implementing the unfollow and following in the UI, \r\n        fetch('/unfollow', { //put request to /unfollow route defined in user.js in server side\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({ //sending the id of the user which is to unfollowed to the /unfollow route.\r\n                unfollowId: userid\r\n            })\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n\r\n                dispatch({ type: \"UPDATE\", payload: { following: data.following, followers: data.followers } }) //dispatching the updated following and followers array payload to the userReducer.js\r\n                localStorage.setItem(\"user\", JSON.stringify(data))\r\n                setProfile((prevState) => {//setting the state when user unfollowed some other user\r\n                    const newFollower = prevState.user.followers.filter(item => item !== data._id) //creating a newfollower array which contain the id of all the follower except the who is unfollowing the current user\r\n                    return {\r\n                        //as every entry is either object or array, we have to use spread operator repeatedly to merge states\r\n                        ...prevState, //spreading the previous state\r\n                        user: {\r\n                            ...prevState.user, //spreading the previous state.user\r\n                            followers: newFollower //setting the followers array as the newFollower array\r\n                        }\r\n                    }\r\n                })\r\n                setShowFollow(true)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            { userProfile ? //if userProfile exists then below whole code will implement\r\n\r\n\r\n                <div style={{ maxWidth: \"550px\", margin: \"0px auto\" }}>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        margin: \"18px 0px\",\r\n                        borderBottom: \"1px solid grey\"\r\n                    }}>\r\n                        <div>\r\n                            <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                                src={userProfile.user.pic}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            {/* //dynamically passing the user name and user email using state option only if it exists */}\r\n                            <h4>{userProfile.user.name}</h4>\r\n                            <h5>{userProfile.user.email}</h5>\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"108%\" }}>\r\n                                {/* //dynamically showing number of posts posted by the user  */}\r\n                                <h6>{userProfile.posts.length} Posts</h6>\r\n                                {/* //dynamically setting the followers and following array in profile */}\r\n                                <h6>{userProfile.user.followers.length} Followers</h6>\r\n                                <h6>{userProfile.user.following.length} Following</h6>\r\n                            </div>\r\n                            {showfollow ? //if showfollow is false, then we will see the follow button\r\n                                <button style={{ margin: \"10px\" }} className=\"btn waves-effect waves-light\" onClick={() => followUser()}>Follow</button>\r\n                                : //and if showfollow is true, then we will see the unfollow button\r\n                                <button style={{ margin: \"10px\" }} className=\"btn waves-effect waves-light\" onClick={() => unfollowUser()}>Unfollow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"gallery\">\r\n                        {\r\n                            userProfile.posts.map(item => { //using map method to dynamically assign properties to each element, item refres to data and data refers to reult.mypost array that contain all info about posts\r\n                                return (\r\n                                    <img key={item._id} className=\"item\" src={item.photo} alt={item.title}></img>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                //if userProfile does not exists then below  code will implement showing Loding\r\n                : <h2>Loading Profile</h2>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport M from 'materialize-css'\r\nimport { UserContext } from '../../App'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Home() { //function for dynamically creating posts\r\n    const [data, setData] = useState([]) //hook for setting post data in an array\r\n    const { state, dispatch } = useContext(UserContext) //state has all the details of the user who is logged in\r\n\r\n    useEffect(() => {\r\n        fetch('/getsubpost', { //get request for fetching data stored in database regarding all the posts using /allpost route in post.js in server\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\") //passing token as user can only create post when signed in\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                setData(result.posts) //setting data to the obtatined array of result.posts containing info about all the posts\r\n            })\r\n    }, [])\r\n\r\n    const likePost = (id) => { //passing the post id to the /like route in the backend by sending a put request\r\n        fetch('/like', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {//function for updating like state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {//function for updating like state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    const makeComment = (text, postId) => { //function for passing the post id and text to the /comment route in the backend by sending a put request\r\n        fetch('/comment', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: postId,\r\n                text: text\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.map(item => {//function for updating comment state\r\n                    if (item._id === result._id) {\r\n                        return result //if both the id's are equal will return the updated record\r\n                    } else {\r\n                        return item //otherwise will return the old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    const deletePost = (postid) => {\r\n        fetch(`/deletepost/${postid}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                console.log(result)\r\n                const newData = data.filter(item => { //filtering out every item or post \r\n                    return item._id !== result._id //in this filter will return all the items whose id is not equal to id of the post to be deleted i.e will exclude the one post to be deleted and will show rest of the posts hence delete functionality implemented \r\n                })\r\n                setData(newData)//will set the data as the new filtered out array of the posts \r\n                M.toast({ html: \"Post Deleted\", classes: \"#2e7d32 green darken-3\" })\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {\r\n                data.map(item => { //using map method to dynamically assign properties to each element, item refres to data and data refers to reult.posts array that contain all info about posts\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n                            {/* //in the below line is the very important logic to dynamically view other user's profile\r\n                            if the logged in user clicks on the other user's  name then he will redirect to other user's profile\r\n                            and if the logged in user clicks on his name than he will redirect to his profile */}\r\n                            <h5 style={{ padding: \"5px\" }}><Link to={item.postedBy._id !== state._id ? `/profile/${item.postedBy._id}` : \"/profile\"}\r\n                            >{item.postedBy.name}</Link> {/* dynamically passing name of the user who created the post */}\r\n\r\n                                {item.postedBy._id == state._id //logic for showing delete post icon to only to the user who created it, \r\n                                    && <i className=\"material-icons\" style={{ //delete icon will show if the logic is true\r\n                                        float: \"right\"\r\n                                    }}\r\n                                        onClick={() => deletePost(item._id)} //implementing the onclick functionality on delete icon, it will refer to deletePost function and will also pass _id\r\n                                    >delete</i>\r\n                                }</h5>\r\n                            <div className=\"card-image\">\r\n                                {/* dynamically passing photo url of the photo uploaded by the user who created the post */}\r\n                                <img src={item.photo}></img>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <i className=\"material-icons\" style={{ color: \"red\" }}>favorite</i>\r\n                                {/* //in the line below adding css materialize icons for like and unlike */}\r\n                                {item.likes.includes(state._id) //in this we are adding a logic to not to show like icon to the user who has already liked a post and unlike icon and unlike icon to user who has already disliked the post\r\n                                    ? <i className=\"material-icons\" //so in this if likes array contain the user id that means user has already liked the post, so they will only be shown the dislike icon\r\n                                        onClick={() => { unlikePost(item._id) }}\r\n                                    >thumb_down</i>\r\n                                    : <i className=\"material-icons\" //and in this if likes array  not contain the user id that means user has not liked the post, so they will only be shown the like icon\r\n                                        onClick={() => { likePost(item._id) }}\r\n                                    >thumb_up</i>}\r\n\r\n\r\n                                {/* //dynamically passing the number of likes, by the length of likes array that is present in every item */}\r\n                                <h6>{item.likes.length} Likes</h6>\r\n                                {/* dynamically passing title and body of the post created by the user */}\r\n                                <h6>{item.title}</h6>\r\n                                <p>{item.body}</p>\r\n\r\n                                {/* //logic for dynamically showing comments on the post */}\r\n                                {\r\n                                    item.comments.map(record => { //mapping the comments array in the item\r\n                                        return (\r\n\r\n                                            < h6 key={record._id} ><span style={{ fontWeight: \"500\" }}> <Link to={record.postedBy._id !== state._id ? `/profile/${record.postedBy._id}` : \"/profile\"}>{record.postedBy.name} </Link>- </span>{record.text} </h6>//this will return everytime a cooment is made, the comment text and user's name will be shown on the screen\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                                {/* //in the line below we are creating logic for dynamically post comments */}\r\n                                <form onSubmit={(e) => {\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value, item._id) //on submit of the we will pass two values text and id, e.target[0].value refers to the comment posted by the user and item._id refers to the id\r\n                                    e.target[0].value = \"\"\r\n                                }}>\r\n                                    <input type=\"text\" placeholder=\"Add a comment\" />\r\n                                    <button className=\"btn #4caf50 green\" type=\"submit\" name=\"action\">Post Comment\r\n                                       <i className=\"material-icons right\">send</i>\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home\r\n","export const initialState = null\r\n\r\nexport const reducer = (state, action) => {\r\n    if (action.type === \"USER\") {\r\n        return action.payload\r\n    }\r\n    if (action.type === \"CLEAR\") { //if the logout button will clicked, this will implement, it will simply return the state as null.\r\n        return null\r\n    }\r\n    if (action.type === \"UPDATE\") { // it is action for following other users, it will update the follwers and following array on every click \r\n        return {\r\n            ...state,\r\n            followers: action.payload.followers,\r\n            following: action.payload.following\r\n        }\r\n    }\r\n    if (action.type === \"UPDATEPIC\") { //when profile pic is updated\r\n        return {\r\n            ...state,\r\n            pic: action.payload\r\n        }\r\n    }\r\n    return state\r\n}","import React, { useEffect, createContext, useReducer, useContext } from 'react'\nimport Navbar from './components/Navbar';\nimport './App.css'\nimport { BrowserRouter, Route, Switch, useHistory } from 'react-router-dom'\nimport Home from './components/screens/Home';\nimport Signup from './components/screens/Signup';\nimport Login from './components/screens/Login';\nimport Profile from './components/screens/Profile';\nimport CreatePost from './components/screens/CreatePost';\nimport UserProfile from './components/screens/UserProfile'\nimport SubscribedUserPosts from './components/screens/SubscribedUserPosts'\nimport { reducer, initialState } from './reducers/userReducer'\n\nexport const UserContext = createContext()\n\nconst Routing = () => {\n  const history = useHistory()\n  const { state, dispatch } = useContext(UserContext)\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"user\")) //accessing the user details that are available when user is logged in and prsing them from JSON to javascript objects\n    if (user) { //if the user is not empty i.e he is logged in then \n      dispatch({ type: \"USER\", payload: user })\n\n    } else { // and if user is not logged in then push him to sign in page\n      history.push('/signin')\n    }\n  }, []) //we want this routing function to be implemented only once i.e on mounting that's why we are passing an empty array \n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route path=\"/signin\">\n        <Login />\n      </Route>\n      <Route exact path=\"/profile\">\n        <Profile />\n      </Route>\n      <Route path=\"/create\">\n        <CreatePost />\n      </Route>\n      <Route path=\"/profile/:userid\">\n        <UserProfile />\n      </Route>\n      <Route path=\"/myfollowingpost\">\n        <SubscribedUserPosts />\n      </Route>\n    </Switch>\n  )\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState) //destructuring useReducer hook by passing in reducer and initial state and getting state and dispatch in return\n  return (\n    <UserContext.Provider value={{ state: state, dispatch: dispatch }}>\n      {/* // every component should be wrapped under the browser router to access different routes */}\n      <BrowserRouter>\n        <Navbar />\n        <Routing />\n      </BrowserRouter >\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}